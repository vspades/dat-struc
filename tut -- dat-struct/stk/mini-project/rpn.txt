#include "stdafx.h"
#include <iostream>
#include <cstring>
#include <stack>
#include <sstream>
#include <math.h>
#include <string>

using namespace std;

// get weight of operators as per precedence
// higher weight given to operators with higher precedence
// for non operators, return 0 
int getWeight(char ch) {
	switch (ch) {
		case '^': return 3;
		case 's':
		case 'c':
		case '/':
		case '*': return 2;
		case '+':
		case '-': return 1;
		default : return 0;
   }
}

int k = 0;
// convert infix expression to postfix using a stack
void infix2postfix(char infix[], char postfix[], int size) {
	stack<char> s;
	int weight;
	int i = 0;
	
	char ch;
	// iterate over the infix expression   
	while (i < size) {
		ch = infix[i];
		if (ch == '(') {
			// simply push the opening parenthesis
			s.push(ch);
			i++;
			continue;
		}
		if (ch == ')') {
			// if we see a closing parenthesis,
			// pop of all the elements and append it to
			// the postfix expression till we encounter
			// a opening parenthesis
			while (!s.empty() && s.top() != '(') {
				postfix[k++] = s.top();
				s.pop();
			}
			// pop off the opening parenthesis also
			if (!s.empty()) {
				s.pop();
			}
			i++;
			continue;
		}
		weight = getWeight(ch);
		if (weight == 0) {
			// we saw an operand
			// simply append it to postfix expression
			postfix[k++] = ch;
		}
		else {
			// we saw an operator
			if (s.empty()) {
			// simply push the operator onto stack if
            // stack is empty
            s.push(ch);
			}
			else {
				// pop of all the operators from the stack and
				// append it to the postfix expression till we
				// see an operator with a lower precedence that
				// the current operator
				while (!s.empty() && s.top() != '(' &&
					weight <= getWeight(s.top())) {
					postfix[k++] = s.top();
					s.pop();
				}
				// push the current operator onto stack
				s.push(ch);
			}
		}
		i++;
	}
	// pop of the remaining operators present in the stack
	// and append it to postfix expression 
	while (!s.empty()) {
		postfix[k++] = s.top();
		s.pop();
	}
	postfix[k] = 0; // null terminate the postfix expression 
}

int main() {

	string s1;
	cout << "Expression: ";
	cin >> s1;
	
	int x;
	cout << "X: ";
	cin >> x;
	char c = '0' + x;

	char *infix;
	infix = new char[s1.length()];
	char *postfix;
	postfix = new char[0];
	
	for(int i = 0; i < s1.length(); i++) {
		infix[i] = s1[i];
	}

	infix2postfix(infix, postfix, s1.length());

	for(int i = 0; i < s1.length(); i++) {
		if(postfix[i] == 'x')
			postfix[i] = c;
	}
	
	string pfix = "";
	for(int i = 0; i < k; i++) {
		pfix += postfix[i];
	}
	pfix += '=';

	string *postfix2;
	postfix2 = new string[pfix.length()];
	
	for(int i = 0; i < pfix.length(); i++)
		postfix2[i] = pfix[i];
	
	stack<double> da_stack;
	string in;
	for(int i = 0; i < pfix.length(); i++){
		
		in = postfix2[i];
		if(in == "+"){
			int a = da_stack.top();
			da_stack.pop();
			int b = da_stack.top();
			da_stack.pop();
			da_stack.push(a + b);
		}
		else if(in == "-"){
			int a = da_stack.top();
			da_stack.pop();
			int b = da_stack.top();
			da_stack.pop();
			da_stack.push(a - b);
		}
		else if(in == "s"){ // s for sin()
			double a = da_stack.top();
			da_stack.pop();
			da_stack.push(sin(a));
		}
		else if(in == "c"){ // c for cos()
			double a = da_stack.top();
			da_stack.pop();
			da_stack.push(cos(a));
		}
   		else if(in == "^"){
			double a = da_stack.top();
			da_stack.pop();
			double b = da_stack.top();
			da_stack.pop();
			da_stack.push(a * b);
		}
		else if(in == "*"){
			double a = da_stack.top();
			da_stack.pop();
			double b = da_stack.top();
			da_stack.pop();
			da_stack.push(pow(a,b));
		}
		else if(in == "/"){
			double a = da_stack.top();
			da_stack.pop();
			double b = da_stack.top();
			da_stack.pop();
			da_stack.push(a / b);
		}
		else if(in == "="){
			if(da_stack.size() != 1){
				cout << "Bad expression" << endl;
			}
			else{
				cout << "result: " << da_stack.top() << endl;
				da_stack.pop();				
			}
		}
		else{
			double d;
			stringstream ss(in);
    		ss >> d;

	        da_stack.push(d);
		}
	}
	cout << "press any key to exit...";
	cin.get();
	cin.get();
}